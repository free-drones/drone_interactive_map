name: Pylint

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        #python-version: ["3.8", "3.9", "3.10"]
        python-version: ["3.8"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools
        pip install wheel
        pip install pylint==2.14.1
        pip install pylint-exit==1.2.0
        pip install -r requirements.txt
    - id: pylint
      name: Analyze the code
      run: |
        pylint $(git ls-files '*.py') > pylint.log || pylint-exit $? -efail
    - id: changed-files
      name: Look for changed files
      if: ${{ github.event_name == 'pull_request' && failure() && steps.pylint.outcome == 'failure' }}
      uses: jitterbit/get-changed-files@v1
    - id: pylint-errors
      name: Prepare pylint error messages
      if: ${{ github.event_name == 'pull_request' && failure() && steps.pylint.outcome == 'failure' }}
      run: |
        error="$(grep -e '^E[0-9]\+' -e '^W0101' -e '^W0104' -e '^W0311' -e '^W0611' pylint.log)"
        error="${error//'%'/'%25'}"
        error="${error//$'\n'/'%0A'}"
        error="${error//$'\r'/'%0D'}"
        [ -z ${error} ] || error="### Errors :rotating_light:%0A\`\`\`%0A"${error}"%0A\`\`\`"
        echo "::set-output name=body::$error"
    - id: pylint-warnings
      name: Prepare pylint warnings
      if: ${{ github.event_name == 'pull_request' && failure() && steps.pylint.outcome == 'failure' }}
      run: |
        touch pylint-warning.log
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          grep -e "${changed_file}" pylint.log | grep -e '^W[0-9]\+' >> pylint-warning.log || true
        done
        warning="$(head -n15 pylint-warning.log)"
        [ -z ${warning} ] && warning="$(grep -e '^W[0-9]\+' -m 15 pylint.log)"
        warning="${warning//'%'/'%25'}"
        warning="${warning//$'\n'/'%0A'}"
        warning="${warning//$'\r'/'%0D'}"
        [ -z ${warning} ] || warning="### Warnings :warning:%0A\`\`\`%0A"${warning}"%0A\`\`\`"
        echo "::set-output name=body::$warning"
    - id: pylint-notifications
      name: Prepare pylint notifications
      if: ${{ github.event_name == 'pull_request' && failure() && steps.pylint.outcome == 'failure' }}
      run: |
        touch pylint-notifications.log
        for changed_file in ${{ steps.changed-files.outputs.all }}; do
          grep -e "${changed_file}" pylint.log | grep -e '^R[0-9]\+' -e '^C[0-9]\+' >> pylint-notifications.log || true
        done
        notifications="$(head -n15 pylint-notifications.log)"
        [ -z ${notifications} ] && notifications="$(grep -e '^R[0-9]\+' -e '^C[0-9]\+' -m 15 pylint.log)"
        notifications="${notifications//'%'/'%25'}"
        notifications="${notifications//$'\n'/'%0A'}"
        notifications="${notifications//$'\r'/'%0D'}"
        [ -z ${notifications} ] || notifications="### Refactoring and conventions :bulb:%0A\`\`\`%0A"${notifications}"%0A\`\`\`"
        echo "::set-output name=body::$notifications"
#    - id: pytest
#      name: Test the code
#      run: |
#       pytest -rf > pytest.log
#    - id: pytest-errors
#      name: Prepare pytest error messages
#      if: ${{ github.event_name == 'pull_request' && failure() && steps.pytest.outcome == 'failure' }}
#      run: |
#        error="$(sed '1,/short\ test\ summary\ info/d' pytest.log)"
#        error="${error//'%'/'%25'}"
#        error="${error//$'\n'/'%0A'}"
#       error="${error//$'\r'/'%0D'}"
#       echo "::set-output name=body::$error"
#    - name: Report pytest errors
#      if: ${{ github.event_name == 'pull_request' && failure() && steps.pytest.outcome == 'failure' }}
#      uses: peter-evans/create-or-update-comment@v1
#      with:
#        issue-number: ${{github.event.pull_request.number}}
#        body: |
#         ### Some tests failed :confused:
#          ```
#          ${{ steps.pytest-errors.outputs.body }}
#          ```
#    - id: pytest-stats
#      name: Prepare pytest stats
#      if: ${{ github.event_name == 'pull_request' }}
#      run: |
#        stats="$(tail -n1 pytest.log | sed 's/\=//g')"
#        echo "::set-output name=body::$stats"
#    - name: Report success
#      if: ${{ github.event_name == 'pull_request' }}
#      uses: peter-evans/create-or-update-comment@v1
#      with:
#        issue-number: ${{github.event.pull_request.number}}
#        body: |
#          Test results: ${{ steps.pytest-stats.outputs.body }}
#          ${{ steps.pylint-rating.outputs.body }} :rocket: :heart:
